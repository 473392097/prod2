<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
               http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />

	</bean>

	<bean id="connectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		  p:host-name="${redis.host}" p:port="${redis.port}"
		  p:database="${redis.dbIndex}"
		  p:pool-config-ref="poolConfig" />

	<!--<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
		<!--<property name="connectionFactory" ref="connectionFactory" />-->
		<!--<property name="keySerializer">-->
			<!--<bean-->
				<!--class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
		<!--</property>-->
		<!--<property name="valueSerializer">-->
			<!--<bean-->
				<!--class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
		<!--</property>-->
	<!--</bean>-->

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"/>
	</bean>

	<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
	<!--<bean id="redisCacheTransfer" class="com.lanou.cn.redis.RedisCacheTransfer">-->
	<!--<property name="JedisConnectionFactory" ref="connectionFactory"/>-->
	<!--</bean>-->
	<!-- //End 单机版Redis集成 -->

	<!-- Redis缓存管理对象 -->
	<bean id="cacheManager1" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg index="0" ref="redisTemplate" />
		<property name="defaultExpiration" value="${redis.expiration}"/>
	</bean>


	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
	<!--<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
	<!--<property name="caches">-->
	<!--<set>-->
	<!--&lt;!&ndash;<bean class="com.lanou.cn.redis.SpringRedisCache">&ndash;&gt;-->
	<!--&lt;!&ndash;<property name="redisTemplate" ref="redisTemplate" />&ndash;&gt;-->
	<!--&lt;!&ndash;<property name="name" value="lf_cache"/>&ndash;&gt;-->
	<!--&lt;!&ndash;</bean>&ndash;&gt;-->
	<!--<bean-->
	<!--class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"-->
	<!--p:name="default" />-->

	<!--<bean-->
	<!--class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"-->
	<!--p:name="accountCache" />-->
	<!--</set>-->
	<!--</property>-->
	<!--</bean>-->


	<!-- 开启Spring缓存 -->
	<cache:annotation-driven cache-manager="cacheManager1"/>
	<!-- 配置RedisCacheConfig -->
	<bean id="redisCacheConfig" class="com.lanou.cn.configration.RedisCacheConfig">
		<constructor-arg ref="connectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="cacheManager1" />
	</bean>

</beans>